import numpy as np
from sklearn.metrics import roc_auc_score
import pickle
import re # reg exp

'''
# (test_set_x, test_set_y)
print(test_data[0])
print(len(test_data[0])) # 1507
print(test_data[1])
print(len(test_data[1])) # 1507
'''

# STEP 1: Set your local folder path where *.test_probs, *.test_set files were generated by GRAM
dir = 'gram_hf'
#dir = '../gram_hf'
#dir = '../gram_hf_no_attention'

# Get train ratio values
train_ratios = []
lowest_ratio = 0.07  # e.g. 0.07 == 7% of training data
highest_ratio_exclusive = 0.77  # up to this %, excludes this number (not inclusive)
step_size = 0.07
for train_ratio in np.arange(lowest_ratio, highest_ratio_exclusive, step_size):
    #print(train_ratio)
    train_ratios.append(round(train_ratio, 2))

# Read local log file for best epochs
# FILE: gram_hf.log with string: 'Best Epoch:44, Avg_Duration:20.447408, Train_Cost:0.153532, Valid_Cost:0.179720, Test_Cost:0.194421'
best_train_results = []
with open("gram_hf/gram_hf.log", "r") as file:
    data = file.readlines()
    tr_index = 0
    for i, line in enumerate(data):
        found_epoch_line = line.find('Best Epoch:')
        if found_epoch_line != -1:  # found text
            best_epoch_int = list(map(int, re.findall('\d+', line)))[0] # get first integer (i.e. at Best Epoch:3,)
            #print("Best epoch:", str(best_epoch_int))
            best_train_results.append((train_ratios[tr_index], best_epoch_int))
            tr_index += 1

#results = [(0.07,4),
#           (0.14,51),
#           (0.21,84),
#           (0.28,60),
#           (0.35,39),
#           (0.42,28),
#           (0.49,38),
#           (0.56,40),
#           (0.63,39),
#           (0.7,46),
#           ]

#for train_ratio in np.arange(0.07,0.77,0.07):
overleaf_string = ""
for train_ratio, epoch in best_train_results:
    with open(f'{dir}/gram_hf_{round(train_ratio,2)}.test_set', 'rb') as f:
        test_data = pickle.load(f)
    with open(f'{dir}/gram_hf_{round(train_ratio,2)}_{epoch}.test_probs', 'rb') as f:
        y_pred_probs = pickle.load(f, encoding='latin1')
    
    y_true_labels = test_data[1]
    for i, y in enumerate(y_true_labels):
        y_true_labels[i] = y > 0.5
    auc = roc_auc_score(y_true_labels, y_pred_probs)

    print(f"AUC: {auc:.2f}, train_ratio: {round(train_ratio,2)}")
    
    overleaf_string = overleaf_string + " & " + str(round(auc,2)) 

print("overleaf_string" + overleaf_string)  # For final report